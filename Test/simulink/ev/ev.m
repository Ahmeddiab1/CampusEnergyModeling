%% ev.m - Test the various EV blocks in the Simulink library
%
% This script tests the various electric vehicle blocks in the Campus
% Energy Modeling Simulink library. The test for the EV battery block is
% comprehensive; the other tests verify only that the associated test
% systems run without error. Proper operation may be verified by simulating
% the models manually and examining the output on the scopes.
%
% FUNCTIONS:
%
% SIMULINK BLOCKS:
%   Electric Vehicle
%   EV Battery
%   EV Charging Supervisory Control
%
% NOTES:
%   1. This script tests only EV blocks that do not have SimPowerSystems as
%      a dependency. To test the EV charging station blocks (which require
%      SimPowerSystems), see the `ev_charging` folder.

%% Setup
% Parameters for EV battery test:
battCap = 1000;     % Battery capacity (Wh)
battPower = 1000;   % Battery charge/discharge power (W)
eff = 0.95;         % Battery charging efficiency (fraction)

%% Test Electric Vehicle Battery Model
% Name of Simulink model
mdl = 'ev_battery';

% Open and run simulation
open_system(mdl);

% Compute test times (s)
chargeTime = (3600*battCap) / (battPower*eff);  % Battery charge time
dischargeTime = (3600*battCap) / (battPower);   % Battery discharge time
totTime = round(2 * chargeTime);                % Total test time
schedTime = round(totTime/4);                   % Schedule start time 
fillTime = schedTime + chargeTime;              % Time to battery full
emptyTime = schedTime + dischargeTime;          % Time to battery empty

% Adjust simulation parameters
set_param( mdl, ...
    'FixedStep',    '1'                 , ...   % 1 second
    'StartTime',    '0'                 , ...
    'StopTime',     num2str(totTime)    );

% Set model parameters (charge test)
set_param( strjoin({mdl, 'Charging Power'}, '/'), ...
    'Value',        num2str(battPower)  );
set_param( strjoin({mdl, 'EV Battery'}, '/'), ...
    'capacity',     num2str(battCap)    , ...
    'initSOC',      '0'                 , ...
    'eff',          num2str(eff)        );
set_param( strjoin({mdl, 'Schedule'}, '/'), ...
    'Time',         num2str(schedTime)  );

% Run simulation
sim(mdl);

% Check results...
    % Battery filled at correct time (within 1 second)
    actualFillTime = batt_soc.time( find(batt_soc.data == 1, 1) );
    assert( abs(fillTime - actualFillTime) <= 1, ...
        'electric_vehicles:batteryChargeTimeError', ...
        ['Battery time to charge to 100%% SOC is not the expected ' ...
         'value.'] );
    
    % Battery status is correct
    assert( all(batt_status.data(batt_status.time < schedTime) == -1), ...
        'electric_vehicles:batteryStatusError', ...
        ['Battery status when vehicle absent is not the expected ' ...
         'value of -1.'] );
    assert( all(batt_status.data(batt_status.time >= schedTime & ...
        batt_soc.data == 1) == 1), ...
        'electric_vehicles:batteryStatusError', ...
        ['Battery status when battery is full is not the expected ' ...
         'value of 1.'] );
    assert( all(batt_status.data(batt_status.time >= schedTime & ...
        batt_soc.data < 1) == 0), ...
        'electric_vehicles:batteryStatusError', ...
        ['Battery status when battery is charging is not the expected ' ...
         'value of 0.'] );

% Set model parameters (discharge test)
set_param( strjoin({mdl, 'Charging Power'}, '/'), ...
    'Value',        num2str(-battPower) );
set_param( strjoin({mdl, 'EV Battery'}, '/'), ...
    'capacity',     num2str(battCap)    , ...
    'initSOC',      '1'                 , ...
    'eff',          num2str(eff)        );
set_param( strjoin({mdl, 'Schedule'}, '/'), ...
    'Time',         num2str(schedTime)  );

% Run simulation
sim(mdl);

% Check results...
    % Battery emptied at correct time (within 1 second)
    actualEmptyTime = batt_soc.time( ...
        find(batt_status.time >= schedTime & batt_soc.data == 0, 1) );
    assert( abs(emptyTime - actualEmptyTime) <= 1, ...
        'electric_vehicles:batteryDischargeTimeError', ...
        ['Battery time to discharge to 0%% SOC is not the expected ' ...
         'value.'] );
    
    % Battery status is correct
    assert( all(batt_status.data(batt_status.time < schedTime) == -1), ...
        'electric_vehicles:batteryStatusError', ...
        ['Battery status when vehicle absent is not the expected ' ...
         'value of -1.'] );
    assert( all(batt_status.data(batt_status.time >= schedTime & ...
        batt_soc.data == 1) == 1), ...
        'electric_vehicles:batteryStatusError', ...
        ['Battery status when battery is full is not the expected ' ...
         'value of 1.'] );
    assert( all(batt_status.data(batt_status.time >= schedTime & ...
        batt_soc.data < 1) == 0), ...
        'electric_vehicles:batteryStatusError', ...
        ['Battery status when battery is charging is not the expected ' ...
         'value of 0.'] );
     
% Close model
close_system(mdl, 0);

%% Test Electric Vehicle Model
% Name of Simulink model
mdl = 'ev';

% Verify that the model simulates without error
open_system(mdl);
sim(mdl);
close_system(mdl, 0);

%% Test Electric Vehicle Supervisory Control
% Name of Simulink model
mdl = 'ev_supervisory_control';

% Verify that the model simulates without error
open_system(mdl);
sim(mdl);
close_system(mdl, 0);
