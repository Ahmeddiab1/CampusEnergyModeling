This demonstration runs a full-year SAM PV model in SSC using the MATLAB interface, extracts the results, and uses the PV energy production to drive a constant power load block in SimPowerSystems.

Features:
•	Import SSC data from SAM via an automatically generated text file
•	Execute SAM/SSC model from MATLAB using the MATLAB-SSC interface
•	Demonstrate wrapper function for the MATLAB-SSC interface
•	Demonstrate workflow for integrating SAM output with SimPowerSystems

Requirements:
•	MATLAB/Simulink (R2013a)
•	Campus Modeling project MATLAB/Simulink libraries
•	SimPowerSystems
•	SSC SDK

Instructions: 
1.	Open MATLAB and set the working directory to the folder that contains this README file.
2.	Ensure the MATLAB interface folder for the SSC SDK is in the MATLAB path.
3.	If desired, modify the weather file path in 'pv_oneshot_demo_init.m'.
4.	Run the script 'pv_oneshot_demo_init.m' to execute PV-SAM in SSC and save the results.
5.  Run the Simulink model and examine the results in the scope.

Comments:
•	The file 'RSF_wing_C_pvsamv1.txt' is an example of a text file automatically generated by SAM when SAM executes SSC to perform a specific simulation. Such files contain most of the input variables for SSC for the most recently executed model for each SSC module. SAM places the files in [HOME]\SAM\ssc, where [HOME] is the user's home directory. The files are named 'sscdbg_[MODULE].txt', where [MODULE] represents the name of the SSC module that was called. In this case, 'RSF_wing_C_pvsamv1.txt' represents data that was passed to the pvsamv1 SSC module. The MATLAB utility function importSSC() will import the data from one of these text files for use with the MATLAB-SSC interface. Note: SAM overwrites the SSC text files each time it executes a model, so one should copy the text file out of [HOME]\SAM\ssc and possibly rename it, as has been done with 'RSF_wing_C_pvsamv1.txt'.
•	For a more complete demo, the user can modify the 'RSF_wing_C.zsam' SAM model (or create a new SAM model), execute it in SAM, copy the resulting file into this demo folder, modify the 'pv_oneshot_demo_init.m' script if required, and then follow the instructions above.
•	At this time, the pvsamv1 module in SSC supports only annual data at an hourly time step, that is, exactly 8760 hours of data starting in January. This limits the utility of SAM's PV model for cosimulation. Although the PV data may be interpolated, sub-hourly variability cannot be captured by this simulation approach. In the future, SSC may support single time step calculations for SAM's PV model (similar to the pvwattsfunc module).
